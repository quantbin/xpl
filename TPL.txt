               TPL Reference
               *************
Comments
--------
Everything after # until the end of the line is ignored.

Data types
----------
Data types:'int 'float 'bool 'str 'date 'time 'null 'list 'dict 

Atoms:
    1
    1.2
    true
    false
    'stringwithoutspaces
    "string with spaces"
    2016.08.09
    2016.08.09_23.58.59_123
    null

Lists:
    []                          #empty list
    [1]                         #single element list
    1 2 3 4                     #sequence of values is automatically converted to list
    [[1 2] 3 [4]]               #embedded lists
    1 2 3, 4 5 6                #same as (1 2 3) (4 5 6)
    ['a 1 true 1.2 2016.08.09]  #mixing types is allowed (lists are not typed)

Dictionaries:
    dict [['key1 11] ['key2 'somethingelse] ['key3 [1 2 1.2]]]

Lambdas (procs)
---------------
    set 'f {a b:+ a b 10}
<lambda>

Implicit parameters: x y z (up to three).
    set 'f {+ x y 10}
<lambda>

Embedded lambdas:
    set 'h {a b c:
        set 'f {z:log z}
        set 't f 11
        + a b t
    }
<lambda>

Variables
---------
Variable assignment takes name of the variable as first parameter 
(note, that name is a string, e.g. 'x) and value as a second parameter.
Variables represent entries in scope's hash table, where variable name is 
the key pointing to a value.
    set 'x 1
1

    set 'lst [1 2 3]
1 2 3

    set 'f {a b:+ a b 10}    #store lambda in variable
{...}

    set ['x 'y] [1 2]        #multiple assignment
1 2

    set 'x 'y, 1 2           #multiple assignment
1 2

Reference:
    set 'y 11
11

    set 'z 'y
"y"

    puts z
11

Note, that set command interprets first parameter as *name* 
of the variable (i.e. key in the scope hash table). 
Therefore when assigning value to variable x, always refer to 
it by name, i.e. set 'x 1. If you omit tick, e.g. set x 1,
then interpreter will dereference x, find its value and 
provide this value to set command as the variable name:
    set 'y 1
1

    set 'x 'y
"y"

    set x 2    #this will set value of y to 2
2

In languages that use = for assignment, x is interpreted 
differently based on its location relative to =, i.e.
symbol x can be both lvalue and rvalue without any decorations. 
In TPL one has to make explicit difference between lvalue and rvalue.

Accessing list elements
-----------------------
    set x [11 22 33 44]
11 22 33 44

    puts x@1        
22

    puts x@[0 1]    
11 22

    set 'i 2
2

    puts x@i        
33

Lists of lists:
    set y [1 2 3] [4 5 6]
1 2 3, 4 5 6

    puts y@0@0
1

    puts y@1@2
6

Dictionaries
------------
    set x@'name 'joe
"joe"

    set x@'code 1234
1234

    puts x@'name            
"joe"

    puts x@['name 'code]    
"joe" 1234

    set z 'na
"na"

    puts x@'{z}me           
"joe"

Proc (verb)
-----------
An action. Takes list as a parameter. Returns a value.

Expressions
-----------
If first element of expression is a proc (built-in or user-defined lambda), 
then it is invoked with rest of expression provided as a parameter (list).
If first element of expression is not a proc, then expression is 
evaluated as is (apply implicit identity op to parameters).
    1
1
    
	x
1

    1 2 3 x
1 2 3 1

    f 10 20
<result of appying 'f' to 10 20>

    {puts 'insidelambda}
"insidelambda"

    {a b:+ a b}
ERROR: missing parameters

Embedded expressions. First proc 'f' is invoked, then 'g':
    g 1 [f 10 20] 2
<result of applying 'f' to 10 20 (=x), and then applying g to 1 x 2>

String substitution
-------------------
    set 'x 1;set 'y 2
2

    puts "x=[x], y=[y]"
"x=1, y=2"

Programs
--------
    set 'x 1
1

    set 'y 2;puts [+ x y]
3

Expression can reference the result of evaluation of 
previous expressions by using dots '.' notation.
Results of each expression are kept on the stack. 
Current expression can reference top element of 
the stack with single dot: '.'. 
Two dots reference second element on the stack etc:
    1
1

    2;+ . ..;puts .    
3

Adverbs
-------
for: apply proc to each element, return null:
    1 2 3 4;for . {puts x}    
1 2 3 4

map: apply proc to each element, return transformed list:
    1 2 3 4;map . {* x 2};puts x    
2 4 6 8

insert: insert proc between all elements, return total:
    1 2 3 4;insert . +;puts .    
10

filter: filter list, leave only elements the result in true:
    1 2 3 4;filter . {mod x 2;eq . 0}  
2 4

Scope
-----
Each call to a user-defined proc creates its own environment, 
where variables for that proc are stored.
    set 'a 1     #global scope, level 0; contains 'a'
    {            #scope level 1; contains 'b'; can see 'a' from sope level 0
        puts a;set 'b 2
        {        #scope level 2
                 #contains 'c' and 'a' that shadows 'a' from global scope
                 #can see 'b' from previous scope
            set 'a 11;puts a b;set 'c 3
        }
    }

Due to dynamic scoping following is possible:
    set 'f {puts x}   #note that it references variable 'x' that is not defined in this scope 
{...}

    set 'x 1;f        #proc f can see 'x' from previous scope
1

Matrices/Tables
---------------
List of lists represents matrix. Note that we store matrices by row, 
i.e. matrix is a list of rows, that in turn are lists of values.
There is no guarantee that dimensions will match, lists can be of 
different lenghts. It is up to a user to enforce proper structure.

Following martix
1 2 3
4 5 6
can be represented as:
    [1 2 3] [4 5 6]
or
    1 2 3, 4 5 6

Following martix
1 4
2 5
3 6
is the result of transposing the above matrix:
    flip [1 2 3] [4 5 6]
or 
    flip 1 2 3, 4 5 6

Dictionary of lists represents table:
    1 2 3;4 5 6;set a@'col1 ..;set a@'col2 ..
4 5 6

    for a {puts x}
1 2 3, 4 5 6

    flip a;for . {puts x}   
1 4, 2 5, 3 6

Note that flipping table or matrix does not reallocate memory, 
it just sets the flag that indicates how the table is traversed - by row or by column.

GoTo!
-----
    set 'a 1
    eq a 1;if . true {goto 'L1};puts 'notone!;goto 'done;label 'L1;puts 'one!;label 'done;

More useful example (note that goto takes additional parameters 
that will be assigned to variables specified in label):
    1 2 3 4 5
    for . {eq x 5;switch . true {goto 'found x}};goto 'notfound
    label 'found 'five
    puts five            #5
    label 'noutfound

Trap
----
If no panic took place, trap command is ignored; otherwise panic will 
unwind the stack until it encounters first trap.
Panic parameters are assigned to names in trap command, therefore 
number of panic parameters should match number of trap parameters.
    {... panic 'notfound 123;...};trap 'msg 'code; ...

Built-in procs
--------------
Reflection/Types:
    type 3.14
'float

    tpl/vars             
<list of variable names in current scope>

    tpl/scopes           
<list of scopes; scope is a hash table of variable names/values>

    cast 1 'float
1.0

	cast 1 'str        
"1.0"

    parse "3.14" 'float
3.14

Math:
    + 1 2 3
6

    - 10 9
1

    * 1 2 3
6

    % 5 3.2
1.5625

    neg 5       
-5

    decr 5      
4

    incr 5      
6

    max 1 2 3
3

    min 1 2 3
1

    rand 1          
<random value between 0 and 1>

    rand 1 2 3 4    
<random element of list: 1 2 3 4>

Logical:
    and true true false      
false

    or true false
true

    not true
false

    set 'x 7
7
    lt x 10;gt x 0;and .. .  
true

    eq 1 2  
false         

    eq [1 2] [1 2]   
true

    gt 10 10   
false

	set 'x 2
2
    switch x 1 {puts '1} 2 {puts '2} else {puts 'unknown}
'2

Strings:
    split "asd fgh" " "         
['asd 'fgh]

    concat "abc" "xyz"          
"abcxyz"

Lists, dictionaries, tables:
    keys d                      
<list of keys in dictionary d>

    concat [1 2 3] [4 5 6]      
1 2 3 4 5 6

    head 1 2 3 4                
1

    tail 1 2 3 4                
2 3 4

    rev 1 2 3 4                 
4 3 2 1

    flip 1 2, 3 4
1 3, 2 4

    drop [1 2 3] 1              
2 3

    drop [1 2 3] -1             
1 2

    count 5 6 7                 
3

    shape 5;fill . 0            
0 0 0 0 0

    shape 2 3;fill . 0          
0 0 0, 0 0 0

    shape 2 3;dim .             
2 3

    asc t 'col                  
<table sorted in ascending order by column 'col'>

    desc t 'col
<table sorted in descending order by column 'col'>

    join t1 'col1 t2 'col2      
<join tables (inner)>
    
	union 1 2 3, 2 3 4
1 2 3 4

    inter 1 2 3, 2 3 4
2 3

    except 1 2 3, 2 3 4
[1]

    distinct 1 2 3 2 3 4
1 2 3 4

    in [2 3] [1 2 3 2 3 4] 
true

    iasc 5 12 1 24
2 0 1 3

    idesc 5 12 1 24
3 1 0 2

List of indexes of a list (useful in iterating lists):
    idx ['a 'b [1 2 3] 'c]
0 1 2 3

IO:
    puts 'hello

hello
    gets;set 'userinput .
<user input>

    curl http://some.address    
<contents of the URL>

    slurp c:/dir/file.txt       
<string representing file contents>

    barf 'hello c:/dir/file.txt 
<write string to file>

    tpl/open 127.0.0.1          
<connection handle to another TPL instance>

    tpl/exec h {a:count a} x    
<result of executing send lambda with specified parameters on remote instance>

    tpl/close h
null

Misc:
    #eval this file
    load /path/to/module/file          
    #eval all files in this folder
    load /path/to/module/folder        
    panic 'abortmission;errcode={err}
    #save global scope; tables are stored in csv files; lists in json; atoms all in one file
    save                               
    #save specified variables from global scope, forget the rest
    save 'x 'y 'z                      
    #clean all scopes
    clean                              
    exit

Examples
--------
Inner product:
    {flip x y;map . *;+ .}

Is matrix symmetrical?
    {flip x;eq . x}

Matrix trace (sum of diagonal elements):
    {m:idx m;map . {i:m@i@i};+ .}

Is matrix square?
    {m:count m;set 'nrows .;map m {r:count r;eq . nrows};and .}

Sliding window:
	set 'slide {d w f:count d;- . w;seq .;map . {slice d x w;f .}}

Moving average:
	{d w:slide d w +}

List of variables defined in each scope and print their values:
    tpl/scopes;idx .;. tpl/scopes;flip .
    for . {is:puts 'scope{is@0};keys is@1;for . {puts '[x]=[s@x]}}

---------------------------
Scratchpad:

[1 2 3]
[F 1 2 3]
[F~1 2 3]
[F/1 2 3]

car[append[(A B C); (D E F)]]    
(CAR (APPEND (QUOTE (A B C)) (QUOTE (D E F))))
append [A B C] [D E F];car .
